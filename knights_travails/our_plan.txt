- Make a board class?
   -we need an 8x8 grid of possible positions
- Our tree
   - every node will have up to 8 possible children (up to 8 moves can be made from any position)
   - method: create tree of moves (take in current pos and target pos as arguments)
      - create tree of all moves from current position for (how many?) moves
   - method: find possible paths from pos to target
      - breadth-first search tree to find node that has target position as value
      - create a hash for each node as we search: key is node value (position on board), value is array of nodes from root to current
         - when we find that node, we return the array of nodes from root to target as a path of moves
         - when we finish searching a level of the tree and have not found our target, we generate the next level of moves
            - when we generate the new level, we do not include moves back to positions we have been in 



   0     1     2     3     4     5     6     7

0  00    01    02    03    04    05    06    07

1  10    11    12    X     14    X     16    17

2  20    21    X     23    24    25    X     27

3  30    31    32    33    K     35    36    37

4  40    41    X     43    44    45    X     47

5  50    51    52    X     54    X     56    57

6  60    61    62    63    64    65    66    67

7                                            77

pos: [x,y]
Knight is on pos: [3,4]
Possible moves (children):

[1,3] => x - 2, y - 1
[1,5] => x - 2, y + 1
[2,2] => x - 1, y - 2
[2,6] => x - 1, y + 2
[4,2] => x + 1, y - 2
[4,6] => x + 1, y + 2
[5,3] => x + 2, y - 1
[5,5] => x + 2, y + 1

def create_next_moves(node)
   pos = node.value #an array length 2
   y = pos[0]
   x = pos[1]
   next_possible_moves = []
   if withing_board([y - 2], [x + 1])
      next_possible_moves << [[y - 2], [x + 1]]
   end  
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves << [[y - 2], [x + 1]] 
   next_possible_moves.each do |position|
      if valid_position?(position)
         node.children << Node.new(pos)
      end
   end
end